diff -Nur go1.9.1/src/net/dial.go go_mod/src/net/dial.go
--- go1.9.1/src/net/dial.go	2017-10-04 14:48:09.000000000 -0400
+++ go_mod/src/net/dial.go	2018-06-12 20:31:31.000000000 -0400
@@ -140,6 +140,7 @@
 	i := last(network, ':')
 	if i < 0 { // no colon
 		switch network {
+		case "tls":
 		case "tcp", "tcp4", "tcp6":
 		case "udp", "udp4", "udp6":
 		case "ip", "ip4", "ip6":
@@ -190,6 +191,7 @@
 		}
 		return addrList{addr}, nil
 	}
+
 	addrs, err := r.internetAddrList(ctx, afnet, addr)
 	if err != nil || op != "dial" || hint == nil {
 		return addrs, err
diff -Nur go1.9.1/src/net/dial_test.go go_mod/src/net/dial_test.go
--- go1.9.1/src/net/dial_test.go	2017-10-04 14:48:09.000000000 -0400
+++ go_mod/src/net/dial_test.go	2018-06-12 20:31:31.000000000 -0400
@@ -161,6 +161,8 @@
 	// but other platforms should be instantaneous.
 	if runtime.GOOS == "windows" {
 		expected = 1500 * time.Millisecond
+	} else if runtime.GOOS == "darwin" {
+		expected = 150 * time.Millisecond
 	} else {
 		expected = 95 * time.Millisecond
 	}
diff -Nur go1.9.1/src/net/fd_windows.go go_mod/src/net/fd_windows.go
--- go1.9.1/src/net/fd_windows.go	2017-10-04 14:48:09.000000000 -0400
+++ go_mod/src/net/fd_windows.go	2018-06-12 20:31:31.000000000 -0400
@@ -52,7 +52,7 @@
 }
 
 func (fd *netFD) init() error {
-	errcall, err := fd.pfd.Init(fd.net)
+	errcall, err := fd.pfd.Init(fd.net, true)
 	if errcall != "" {
 		err = wrapSyscallError(errcall, err)
 	}
diff -Nur go1.9.1/src/net/ipsock.go go_mod/src/net/ipsock.go
--- go1.9.1/src/net/ipsock.go	2017-10-04 14:48:09.000000000 -0400
+++ go_mod/src/net/ipsock.go	2018-06-12 20:31:31.000000000 -0400
@@ -242,8 +242,9 @@
 		host, port string
 		portnum    int
 	)
+
 	switch net {
-	case "tcp", "tcp4", "tcp6", "udp", "udp4", "udp6":
+	case "tcp", "tcp4", "tcp6", "udp", "udp4", "udp6", "tls":
 		if addr != "" {
 			if host, port, err = SplitHostPort(addr); err != nil {
 				return nil, err
@@ -261,7 +262,7 @@
 	}
 	inetaddr := func(ip IPAddr) Addr {
 		switch net {
-		case "tcp", "tcp4", "tcp6":
+		case "tcp", "tcp4", "tcp6", "tls":
 			return &TCPAddr{IP: ip.IP, Port: portnum, Zone: ip.Zone}
 		case "udp", "udp4", "udp6":
 			return &UDPAddr{IP: ip.IP, Port: portnum, Zone: ip.Zone}
diff -Nur go1.9.1/src/net/ipsock_posix.go go_mod/src/net/ipsock_posix.go
--- go1.9.1/src/net/ipsock_posix.go	2017-10-04 14:48:09.000000000 -0400
+++ go_mod/src/net/ipsock_posix.go	2018-06-12 20:31:31.000000000 -0400
@@ -116,6 +116,10 @@
 		return syscall.AF_INET6, true
 	}
 
+	if network == "tls" {
+		return syscall.AF_INET, false
+	}
+
 	if mode == "listen" && (laddr == nil || laddr.isWildcard()) {
 		if supportsIPv4map() || !supportsIPv4() {
 			return syscall.AF_INET6, false
diff -Nur go1.9.1/src/net/smtp/smtp.go go_mod/src/net/smtp/smtp.go
--- go1.9.1/src/net/smtp/smtp.go	2017-10-04 14:48:09.000000000 -0400
+++ go_mod/src/net/smtp/smtp.go	2018-06-12 20:31:31.000000000 -0400
@@ -67,6 +67,7 @@
 		return nil, err
 	}
 	c := &Client{Text: text, conn: conn, serverName: host, localName: "localhost"}
+	_, c.tls = conn.(*tls.Conn)
 	return c, nil
 }
 
diff -Nur go1.9.1/src/net/smtp/smtp_test.go go_mod/src/net/smtp/smtp_test.go
--- go1.9.1/src/net/smtp/smtp_test.go	2017-10-04 14:48:09.000000000 -0400
+++ go_mod/src/net/smtp/smtp_test.go	2018-06-12 20:31:31.000000000 -0400
@@ -364,6 +364,53 @@
 QUIT
 `
 
+func TestNewClientWithTLS(t *testing.T) {
+	cert, err := tls.X509KeyPair(localhostCert, localhostKey)
+	if err != nil {
+		t.Fatalf("loadcert: %v", err)
+	}
+
+	config := tls.Config{Certificates: []tls.Certificate{cert}}
+
+	ln, err := tls.Listen("tcp", "127.0.0.1:0", &config)
+	if err != nil {
+		ln, err = tls.Listen("tcp", "[::1]:0", &config)
+		if err != nil {
+			t.Fatalf("server: listen: %s", err)
+		}
+	}
+
+	go func() {
+		conn, err := ln.Accept()
+		if err != nil {
+			t.Fatalf("server: accept: %s", err)
+			return
+		}
+		defer conn.Close()
+
+		_, err = conn.Write([]byte("220 SIGNS\r\n"))
+		if err != nil {
+			t.Fatalf("server: write: %s", err)
+			return
+		}
+	}()
+
+	config.InsecureSkipVerify = true
+	conn, err := tls.Dial("tcp", ln.Addr().String(), &config)
+	if err != nil {
+		t.Fatalf("client: dial: %s", err)
+	}
+	defer conn.Close()
+
+	client, err := NewClient(conn, ln.Addr().String())
+	if err != nil {
+		t.Fatalf("smtp: newclient: %s", err)
+	}
+	if !client.tls {
+		t.Errorf("client.tls Got: %t Expected: %t", client.tls, true)
+	}
+}
+
 func TestHello(t *testing.T) {
 
 	if len(helloServer) != len(helloClient) {
diff -Nur go1.9.1/src/net/ssasockopt.go go_mod/src/net/ssasockopt.go
--- go1.9.1/src/net/ssasockopt.go	1969-12-31 19:00:00.000000000 -0500
+++ go_mod/src/net/ssasockopt.go	2018-06-12 20:31:31.000000000 -0400
@@ -0,0 +1,101 @@
+// +build darwin dragonfly freebsd linux netbsd openbsd solaris windows
+
+package net
+
+import (
+	"runtime"
+	"syscall"
+)
+
+type TLSConn = TCPConn
+
+const (
+	// IPPROTO_TLS              int = 175 % 255
+	IPPROTO_TLS                 int = 205
+	TLS_HOSTNAME                 int = 85
+	TLS_PEER_CERTIFICATE_CHAIN  int = 86
+	TLS_CERTIFICATE_CHAIN        int = 87
+	TLS_PRIVATE_KEY              int = 88
+	TLS_ID                       int = 89
+)
+
+func (c *TLSConn) SetHostname(hostname string) error {
+	return c.tls_setSockoptString(hostname, TLS_HOSTNAME)
+}
+
+func (c *TLSConn) SetCertificateChain(chain string) error {
+	return c.tls_setSockoptString(chain, TLS_CERTIFICATE_CHAIN)
+}
+
+func (c *TLSConn) SetPrivateKey(key string) error {
+	return c.tls_setSockoptString(key, TLS_PRIVATE_KEY)
+}
+
+func (c *TLSConn) tls_setSockoptString(arg string, opt int) error {
+	if c.fd.net != "tls" {
+		panic("Not a tls socket")
+	}
+
+	fd := c.fd.pfd.Sysfd
+
+	err := syscall.SetsockoptString(fd, IPPROTO_TLS, opt, arg)
+	runtime.KeepAlive(fd)
+
+	err = wrapSyscallError("setsockopt", err)
+
+	if err != nil {
+		return &OpError{Op: "set", Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}
+	}
+	return nil
+}
+
+func (c *TLSConn) GetHostname() (string, error) {
+	if c.fd.net != "tls" {
+		panic("Not a tls socket")
+	}
+
+	fd := c.fd.pfd.Sysfd
+
+	ret, err := syscall.GetsockoptHostname(fd, IPPROTO_TLS, TLS_HOSTNAME)
+
+	err = wrapSyscallError("getsockopt", err)
+
+	if err != nil {
+		return "", &OpError{Op: "get", Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}
+	}
+	return ret, nil
+}
+
+func (c *TLSConn) GetPeerCert() (string, error) {
+	if c.fd.net != "tls" {
+		panic("Not a tls socket")
+	}
+
+	fd := c.fd.pfd.Sysfd
+
+	ret, err := syscall.GetsockoptString(fd, IPPROTO_TLS, SO_PEER_CERTIFICATE_CHAIN, 4098)
+
+	err = wrapSyscallError("getsockopt", err)
+
+	if err != nil {
+		return "", &OpError{Op: "get", Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}
+	}
+	return ret, nil
+}
+
+func (c *TLSConn) GetID() (uint64, error) {
+	if c.fd.net != "tls" {
+		panic("Not a tls socket")
+	}
+
+	fd := c.fd.pfd.Sysfd
+
+	ret, err := syscall.GetsockoptUint64(fd, IPPROTO_TLS, TLS_ID)
+
+	err = wrapSyscallError("getsockopt", err)
+
+	if err != nil {
+		return 0, &OpError{Op: "get", Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}
+	}
+	return *ret, nil
+}
diff -Nur go1.9.1/src/net/tcpsock.go go_mod/src/net/tcpsock.go
--- go1.9.1/src/net/tcpsock.go	2017-10-04 14:48:09.000000000 -0400
+++ go_mod/src/net/tcpsock.go	2018-06-13 17:16:36.000000000 -0400
@@ -309,7 +309,7 @@
 // chosen.
 func ListenTCP(network string, laddr *TCPAddr) (*TCPListener, error) {
 	switch network {
-	case "tcp", "tcp4", "tcp6":
+	case "tcp", "tcp4", "tcp6", "tls":
 	default:
 		return nil, &OpError{Op: "listen", Net: network, Source: nil, Addr: laddr.opAddr(), Err: UnknownNetworkError(network)}
 	}
diff -Nur go1.9.1/src/net/tcpsock_posix.go go_mod/src/net/tcpsock_posix.go
--- go1.9.1/src/net/tcpsock_posix.go	2017-10-04 14:48:09.000000000 -0400
+++ go_mod/src/net/tcpsock_posix.go	2018-06-12 20:31:31.000000000 -0400
@@ -59,7 +59,11 @@
 }
 
 func doDialTCP(ctx context.Context, net string, laddr, raddr *TCPAddr) (*TCPConn, error) {
-	fd, err := internetSocket(ctx, net, laddr, raddr, syscall.SOCK_STREAM, 0, "dial")
+	var proto int = 0
+	if net == "tls" {
+		proto = IPPROTO_TLS
+	}
+	fd, err := internetSocket(ctx, net, laddr, raddr, syscall.SOCK_STREAM, proto, "dial")
 
 	// TCP has a rarely used mechanism called a 'simultaneous connection' in
 	// which Dial("tcp", addr1, addr2) run on the machine at addr1 can
@@ -153,7 +157,11 @@
 }
 
 func listenTCP(ctx context.Context, network string, laddr *TCPAddr) (*TCPListener, error) {
-	fd, err := internetSocket(ctx, network, laddr, nil, syscall.SOCK_STREAM, 0, "listen")
+	var proto int = 0
+	if network == "tls" {
+		proto = IPPROTO_TLS
+	}
+	fd, err := internetSocket(ctx, network, laddr, nil, syscall.SOCK_STREAM, proto, "listen")
 	if err != nil {
 		return nil, err
 	}
diff -Nur go1.9.1/src/syscall/syscall_linux.go go_mod/src/syscall/syscall_linux.go
--- go1.9.1/src/syscall/syscall_linux.go	2017-10-04 14:48:09.000000000 -0400
+++ go_mod/src/syscall/syscall_linux.go	2018-06-12 20:31:31.000000000 -0400
@@ -521,6 +521,45 @@
 	return &value, err
 }
 
+const _MAX_HOSTNAME int = 256
+
+func GetsockoptHostname(fd, level, opt int) (string, error) {
+	// make an array of MAX_HOSTNAME size
+	var hostname_arr [_MAX_HOSTNAME]byte
+	vallen := _Socklen(_MAX_HOSTNAME)
+	err := getsockopt(fd, level, opt, unsafe.Pointer(&hostname_arr), &vallen)
+
+	// find the null terminator
+	n := 0
+	for ; n < _MAX_HOSTNAME; n++ {
+		if hostname_arr[n] == 0x0 {
+			break
+		}
+	}
+
+	if n == _MAX_HOSTNAME {
+		return "", err
+	}
+
+	return string(hostname_arr[:n]), err
+}
+
+func GetsockoptString(fd, level, opt, max_size int) (string, error) {
+	var arr []byte = make([]byte, max_size, max_size)
+	vallen := _Socklen(max_size)
+
+	err := getsockopt(fd, level, opt, unsafe.Pointer(&arr[0]), &vallen)
+
+	return string(arr[:vallen]), err
+}
+
+func GetsockoptUint64(fd, level, opt int) (*uint64, error) {
+	var value uint64
+	vallen := _Socklen(unsafe.Sizeof(value))
+	err := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)
+	return &value, err
+}
+
 func SetsockoptIPMreqn(fd, level, opt int, mreq *IPMreqn) (err error) {
 	return setsockopt(fd, level, opt, unsafe.Pointer(mreq), unsafe.Sizeof(*mreq))
 }
